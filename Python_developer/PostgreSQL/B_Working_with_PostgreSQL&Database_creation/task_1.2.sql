CREATE TABLE IF NOT EXISTS genre (
	genre_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	name_genre VARCHAR(60) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS artist (
	artist_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	name_artist VARCHAR(60) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS album (
	album_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	name_album VARCHAR(80) NOT NULL,
	year_release DATE
);

CREATE TABLE IF NOT EXISTS track (
	track_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	name_track VARCHAR(80) NOT NULL,
	duration DECIMAL(4, 2),
	album_id INTEGER REFERENCES album(album_id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS collection (
	collection_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	name_collection VARCHAR(80) NOT NULL,
	year_release DATE
);

CREATE TABLE IF NOT EXISTS genre_artist (
	genre_artist_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	genre_id INTEGER REFERENCES genre(genre_id) ON DELETE SET NULL,
	artist_id INTEGER REFERENCES artist(artist_id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS artist_album (
	artist_album_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	artist_id INTEGER REFERENCES artist(artist_id) ON DELETE SET NULL,
	album_id INTEGER REFERENCES album(album_id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS track_collection (
	track_collection_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	track_id INTEGER REFERENCES track(track_id) ON DELETE SET NULL,
	collection_id INTEGER REFERENCES collection(collection_id) ON DELETE SET NULL
);
